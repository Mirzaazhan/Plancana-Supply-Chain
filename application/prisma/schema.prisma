// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== USER AUTHENTICATION & AUTHORIZATION =====

model User {
  id                String       @id @default(cuid())
  email             String       @unique
  username          String       @unique
  password          String       // Hashed password
  role              UserRole
  status            UserStatus   @default(ACTIVE)
  isEmailVerified   Boolean      @default(false)
  emailVerifyToken  String?
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  lastLogin         DateTime?
  loginAttempts     Int          @default(0)
  lockUntil         DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Profile relationships based on role
  farmerProfile     FarmerProfile?
  processorProfile  ProcessorProfile?
  distributorProfile DistributorProfile?
  retailerProfile   RetailerProfile?
  adminProfile      AdminProfile?
  regulatorProfile  RegulatorProfile?
  
  // Activity tracking
  sessions          UserSession[]
  activityLogs      ActivityLog[]
  
  @@map("users")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  ipAddress    String?
  userAgent    String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}

enum UserRole {
  FARMER
  PROCESSOR
  DISTRIBUTOR
  RETAILER
  REGULATOR
  ADMIN
  SYSTEM_OPERATOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

// ===== ROLE-SPECIFIC PROFILES =====

model FarmerProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  firstName         String
  lastName          String
  phone             String?
  farmName          String
  farmSize          Float?   // in hectares
  farmingType       String[] // organic, conventional, hydroponic
  primaryCrops      String[] // rice, corn, vegetables
  certifications    String[] // organic, halal, etc.
  licenseNumber     String?
  address           String?
  state             String?
  country           String   @default("Malaysia")
  profileImage      String?
  isVerified        Boolean  @default(false)
  verifiedAt        DateTime?
  verifiedBy        String?  // Admin ID who verified
  
  // Farm locations
  farmLocations     FarmLocation[]
  
  // Batches created by this farmer
  batches           Batch[]
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("farmer_profiles")
}

model ProcessorProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  companyName       String
  contactPerson     String
  phone             String?
  email             String?
  facilityType      String[] // mill, warehouse, packaging
  processingCapacity Float?  // tons per day
  certifications    String[] // HACCP, ISO, etc.
  licenseNumber     String?
  address           String?
  state             String?
  country           String   @default("Malaysia")
  isVerified        Boolean  @default(false)
  verifiedAt        DateTime?
  
  // Processing facilities
  facilities        ProcessingFacility[]
  
  // Processing records
  processingRecords ProcessingRecord[]
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("processor_profiles")
}

model DistributorProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  companyName       String
  contactPerson     String
  phone             String?
  email             String?
  distributionType  String[] // local, regional, national, international
  vehicleTypes      String[] // truck, ship, train
  storageCapacity   Float?   // cubic meters
  licenseNumber     String?
  address           String?
  state             String?
  country           String   @default("Malaysia")
  isVerified        Boolean  @default(false)
  
  // Transport routes
  transportRoutes   TransportRoute[]
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("distributor_profiles")
}

model RetailerProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  businessName      String
  contactPerson     String
  phone             String?
  email             String?
  businessType      String[] // supermarket, restaurant, export
  storageCapacity   Float?
  licenseNumber     String?
  address           String?
  state             String?
  country           String   @default("Malaysia")
  isVerified        Boolean  @default(false)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("retailer_profiles")
}

model RegulatorProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  firstName         String
  lastName          String
  agency            String   // MARDI, DOA, etc.
  position          String
  phone             String?
  email             String?
  jurisdiction      String[] // states or regions
  authorities       String[] // inspection, certification, enforcement
  employeeId        String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("regulator_profiles")
}

model AdminProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  firstName         String
  lastName          String
  phone             String?
  email             String?
  adminLevel        AdminLevel @default(MODERATOR)
  permissions       String[] // user_management, system_config, etc.
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("admin_profiles")
}

enum AdminLevel {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

// ===== SUPPLY CHAIN DATA MODELS =====

model FarmLocation {
  id                String   @id @default(cuid())
  farmerId          String
  farmName          String
  latitude          Float
  longitude         Float
  elevation         Float?
  farmBoundary      Json?    // GeoJSON polygon
  soilType          String?
  soilPh            Float?
  isActive          Boolean  @default(true)
  
  farmer            FarmerProfile @relation(fields: [farmerId], references: [id])
  batches           Batch[]
  weatherData       WeatherData[]
  
  @@map("farm_locations")
}

model Batch {
  id                String       @id @default(cuid())
  batchId           String       @unique // BATCH_2024_001
  farmerId          String
  farmLocationId    String?
  productType       String
  variety           String?
  quantity          Float
  unit              String       @default("kg")
  harvestDate       DateTime
  status            BatchStatus  @default(REGISTERED)
  blockchainHash    String?      // Reference to blockchain
  qrCodeHash        String?
  dataHash          String?      // For integrity verification
  
  // Detailed information
  cultivationMethod String?
  seedsSource       String?
  irrigationMethod  String?
  fertilizers       String[]
  pesticides        String[]
  qualityGrade      String?
  moistureContent   Float?
  proteinContent    Float?
  images            String[]     // Image URLs
  notes             String?
  
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relationships
  farmer            FarmerProfile @relation(fields: [farmerId], references: [id])
  farmLocation      FarmLocation? @relation(fields: [farmLocationId], references: [id])
  
  // Supply chain records
  processingRecords ProcessingRecord[]
  transportRoutes   TransportRoute[]
  qualityTests      QualityTest[]
  transactions      Transaction[]
  weatherData       WeatherData[]
  
  @@map("batches")
}

enum BatchStatus {
  REGISTERED
  PROCESSING
  PROCESSED
  IN_TRANSIT
  DELIVERED
  RETAIL_READY
  SOLD
  RECALLED
}

model ProcessingFacility {
  id                String   @id @default(cuid())
  processorId       String
  facilityName      String
  facilityType      String   // mill, warehouse, packaging
  latitude          Float
  longitude         Float
  address           String?
  capacity          Float?   // tons per day
  certifications    String[]
  equipmentList     String[]
  isActive          Boolean  @default(true)
  
  processor         ProcessorProfile @relation(fields: [processorId], references: [id])
  processingRecords ProcessingRecord[]
  
  @@map("processing_facilities")
}

model ProcessingRecord {
  id                String   @id @default(cuid())
  batchId           String
  processorId       String
  facilityId        String
  processingDate    DateTime
  processingType    String   // cleaning, milling, packaging
  inputQuantity     Float
  outputQuantity    Float
  wasteQuantity     Float?
  processingTime    Int?     // minutes
  qualityTests      Json?    // Test results
  operatorName      String?
  energyUsage       Float?   // kWh
  waterUsage        Float?   // liters
  blockchainHash    String?
  
  batch             Batch @relation(fields: [batchId], references: [id])
  processor         ProcessorProfile @relation(fields: [processorId], references: [id])
  facility          ProcessingFacility @relation(fields: [facilityId], references: [id])
  
  @@map("processing_records")
}

model TransportRoute {
  id                String   @id @default(cuid())
  batchId           String
  distributorId     String
  vehicleId         String?
  originLat         Float
  originLng         Float
  destinationLat    Float
  destinationLng    Float
  departureTime     DateTime?
  arrivalTime       DateTime?
  estimatedTime     DateTime?
  distance          Float?   // km
  fuelConsumption   Float?   // liters
  transportCost     Float?
  routePolyline     String?  // Encoded polyline
  status            TransportStatus @default(PLANNED)
  blockchainHash    String?
  
  batch             Batch @relation(fields: [batchId], references: [id])
  distributor       DistributorProfile @relation(fields: [distributorId], references: [id])
  
  @@map("transport_routes")
}

enum TransportStatus {
  PLANNED
  IN_TRANSIT
  DELIVERED
  DELAYED
  CANCELLED
}

model QualityTest {
  id                String   @id @default(cuid())
  batchId           String
  testType          String   // pesticide_residue, heavy_metals, microbial
  testDate          DateTime
  testingLab        String
  testResults       Json     // Detailed results
  passFailStatus    String
  certificateUrl    String?
  blockchainHash    String?
  
  batch             Batch @relation(fields: [batchId], references: [id])
  
  @@map("quality_tests")
}

model Transaction {
  id                String   @id @default(cuid())
  batchId           String
  transactionType   String   // sale, transport_fee, processing_fee
  fromPartyId       String
  toPartyId         String
  baseAmount        Float
  transportFee      Float?
  processingFee     Float?
  taxAmount         Float?
  totalAmount       Float
  currency          String   @default("MYR")
  paymentMethod     String?
  paymentStatus     String   @default("PENDING")
  invoiceNumber     String?
  blockchainHash    String?
  
  batch             Batch @relation(fields: [batchId], references: [id])
  
  @@map("transactions")
}

model WeatherData {
  id                String   @id @default(cuid())
  batchId           String?
  locationId        String
  dateRecorded      DateTime
  temperatureMin    Float?
  temperatureMax    Float?
  humidity          Float?
  rainfallMm        Float?
  windSpeedKmh      Float?
  weatherConditions String?
  
  batch             Batch? @relation(fields: [batchId], references: [id])
  farmLocation      FarmLocation @relation(fields: [locationId], references: [id])
  
  @@map("weather_data")
}

model ActivityLog {
  id                String   @id @default(cuid())
  userId            String
  action            String   // login, create_batch, scan_qr, view_report
  resource          String?  // batch_id, user_id, etc.
  ipAddress         String?
  userAgent         String?
  metadata          Json?    // Additional context
  timestamp         DateTime @default(now())
  
  user              User @relation(fields: [userId], references: [id])
  
  @@map("activity_logs")
}

// ===== SYSTEM CONFIGURATION =====

model SystemConfig {
  id                String   @id @default(cuid())
  configKey         String   @unique
  configValue       Json
  description       String?
  updatedBy         String?
  updatedAt         DateTime @updatedAt
  
  @@map("system_config")
}